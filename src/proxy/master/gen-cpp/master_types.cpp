/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "master_types.h"

#include <algorithm>



const char* VMInfo::ascii_fingerprint = "6F4A3F3C9334B20E5D200C57F5FDFA70";
const uint8_t VMInfo::binary_fingerprint[16] = {0x6F,0x4A,0x3F,0x3C,0x93,0x34,0xB2,0x0E,0x5D,0x20,0x0C,0x57,0xF5,0xFD,0xFA,0x70};

uint32_t VMInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vcpu);
          this->__isset.vcpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VMInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VMInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vcpu", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->vcpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VMInfo &a, VMInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.vcpu, b.vcpu);
  swap(a.memory, b.memory);
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.os, b.os);
  swap(a.__isset, b.__isset);
}

const char* OSInfo::ascii_fingerprint = "DCC01FA63FCBA4D0569C45486D898970";
const uint8_t OSInfo::binary_fingerprint[16] = {0xDC,0xC0,0x1F,0xA6,0x3F,0xCB,0xA4,0xD0,0x56,0x9C,0x45,0x48,0x6D,0x89,0x89,0x70};

uint32_t OSInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->os);
          this->__isset.os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vcpu);
          this->__isset.vcpu = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->memory);
          this->__isset.memory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->disk);
          this->__isset.disk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OSInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OSInfo");

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->os);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vcpu", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->vcpu);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("memory", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->memory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("disk", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->disk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OSInfo &a, OSInfo &b) {
  using ::std::swap;
  swap(a.os, b.os);
  swap(a.vcpu, b.vcpu);
  swap(a.memory, b.memory);
  swap(a.disk, b.disk);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* AppInfo::ascii_fingerprint = "8712088E233655800317F6EEBDC80D2E";
const uint8_t AppInfo::binary_fingerprint[16] = {0x87,0x12,0x08,0x8E,0x23,0x36,0x55,0x80,0x03,0x17,0xF6,0xEE,0xBD,0xC8,0x0D,0x2E};

uint32_t AppInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->source);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exe);
          this->__isset.exe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->argument);
          this->__isset.argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_output);
          this->__isset.app_output = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->job_output_dir);
          this->__isset.job_output_dir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destination);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->run_type);
          this->__isset.run_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interval);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->interval_exe);
          this->__isset.interval_exe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->interval_argument);
          this->__isset.interval_argument = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AppInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AppInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->source);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exe", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->exe);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argument", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_output", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->app_output);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("job_output_dir", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->job_output_dir);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->destination);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("run_type", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->run_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval_exe", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->interval_exe);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("interval_argument", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->interval_argument);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AppInfo &a, AppInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.source, b.source);
  swap(a.exe, b.exe);
  swap(a.argument, b.argument);
  swap(a.app_output, b.app_output);
  swap(a.job_output_dir, b.job_output_dir);
  swap(a.destination, b.destination);
  swap(a.run_type, b.run_type);
  swap(a.interval, b.interval);
  swap(a.interval_exe, b.interval_exe);
  swap(a.interval_argument, b.interval_argument);
  swap(a.__isset, b.__isset);
}

const char* TaskInfo::ascii_fingerprint = "2BB50CE26058BE8A612CC6A44252F0BF";
const uint8_t TaskInfo::binary_fingerprint[16] = {0x2B,0xB5,0x0C,0xE2,0x60,0x58,0xBE,0x8A,0x61,0x2C,0xC6,0xA4,0x42,0x52,0xF0,0xBF};

uint32_t TaskInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->task_id);
          this->__isset.task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->job_id);
          this->__isset.job_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operate);
          this->__isset.operate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->app_info.read(iprot);
          this->__isset.app_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->worker_ip);
          this->__isset.worker_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vm_info.read(iprot);
          this->__isset.vm_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TaskInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TaskInfo");

  xfer += oprot->writeFieldBegin("task_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->task_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("job_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->job_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("operate", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->operate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_info", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->app_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("worker_ip", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->worker_ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vm_info", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->vm_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TaskInfo &a, TaskInfo &b) {
  using ::std::swap;
  swap(a.task_id, b.task_id);
  swap(a.job_id, b.job_id);
  swap(a.operate, b.operate);
  swap(a.app_info, b.app_info);
  swap(a.worker_ip, b.worker_ip);
  swap(a.vm_info, b.vm_info);
  swap(a.__isset, b.__isset);
}

const char* JobInfo::ascii_fingerprint = "C281E19CB6D2888CCE5071A00FC3E879";
const uint8_t JobInfo::binary_fingerprint[16] = {0xC2,0x81,0xE1,0x9C,0xB6,0xD2,0x88,0x8C,0xCE,0x50,0x71,0xA0,0x0F,0xC3,0xE8,0x79};

uint32_t JobInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operate);
          this->__isset.operate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->app_info.read(iprot);
          this->__isset.app_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->os_info.read(iprot);
          this->__isset.os_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->instance);
          this->__isset.instance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JobInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JobInfo");

  xfer += oprot->writeFieldBegin("operate", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->operate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("app_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->app_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("os_info", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->os_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("instance", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->instance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JobInfo &a, JobInfo &b) {
  using ::std::swap;
  swap(a.operate, b.operate);
  swap(a.app_info, b.app_info);
  swap(a.os_info, b.os_info);
  swap(a.instance, b.instance);
  swap(a.__isset, b.__isset);
}


